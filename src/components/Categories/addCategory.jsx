// import { Box, Button, FormControl, Input, InputLabel, MenuItem, Select } from "@mui/material";
// import { useEffect, useState } from "react";
// import { useDispatch, useSelector } from "react-redux";
// import { addCategoryThunk } from "../../Redux/Slices/Categories/categoryThunk";


// export const AddCategory = (props) => {
//     const setAddCtgr = props.setAddCtgr
    
   
//     const dispatch = useDispatch()

//     const [newCategory ,setNewCategory] =useState({categoryName: ''})
        
           
        
    

//     const addCategory = async() => {
//         debugger
//         await dispatch(addCategoryThunk(newCategory));
       
            
        
           
        
//     }
        
//     // "supplierName": "גרפציק",
//     // "licensedNum": 99999,
//     // "bankCode": 1234,
//     // "numOfBankBranch": 12,
//     // "numOfBankAccount": 999,
//     // "nameOfOwnerAccount": "ישראל כץ  ",
   
//     return <>
//         {
//             <div>
//                 <Button onClick={()=>setAddCtgr(false)}>❌</Button>

//                 <Input value={newCategory.categoryName} onChange={(i) => setNewCategory({ ...newCategory, categoryName: i.target.value })} placeholder='שם קטגוריה' />
                

                
//                 {/* ======================================= */}
//                 {/* <button className='button' onClick={() => {addUser();setShowInput(false)}}>לאישור</button> */}
//             </div>
//         }
//         <button onClick={()=>addCategory()}>לאישור</button>


//     </>
// }



import React, { useState } from "react";
import { useDispatch } from "react-redux";
import { addCategoryThunk } from "../../Redux/Slices/Categories/categoryThunk";
import {
  TextField,
  Grid,
  InputAdornment,
  Button,
  Box,
  Typography,
  Divider,
  CircularProgress,
  IconButton,
} from "@mui/material";
import { styled } from "@mui/material/styles";
import CategoryIcon from "@mui/icons-material/Category";
import SaveIcon from "@mui/icons-material/Save";
import CloseIcon from "@mui/icons-material/Close";

// Styled components
const StyledTextField = styled(TextField)(({ theme }) => ({
  marginBottom: theme.spacing(2),
  "& .MuiOutlinedInput-root": {
    borderRadius: 8,
    "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
      borderColor: "#00796b",
    },
  },
  "& .MuiInputLabel-root.Mui-focused": {
    color: "#00796b",
  },
  "& .MuiInputLabel-root": {
    fontFamily: 'Rubik, sans-serif',
  },
  "& .MuiInputBase-input": {
    fontFamily: 'Rubik, sans-serif',
  },
}));

const FormButton = styled(Button)(({ theme }) => ({
  borderRadius: 30,
  padding: "10px 24px",
  fontWeight: 700,
  textTransform: "none",
  fontSize: "0.9rem",
  fontFamily: 'Rubik, sans-serif',
  boxShadow: "0 4px 10px rgba(0,0,0,0.1)",
  transition: "all 0.3s ease",
  "&:hover": {
    transform: "translateY(-2px)",
    boxShadow: "0 6px 15px rgba(0,0,0,0.15)",
  },
}));

export const AddCategory = (props) => {
  const setAddCtgr = props.setAddCtgr;
  const dispatch = useDispatch();
  
  // Colors based on your theme
  const colors = {
    primary: "#00796b", // Teal
    primaryLight: "#48a999",
    primaryDark: "#004c40",
    secondary: "#ff5722", // Deep Orange
    secondaryLight: "#ff8a50",
    secondaryDark: "#c41c00",
    text: "#263238",
    textLight: "#546e7a",
    background: "#f5f5f5",
    card: "#ffffff",
    border: "#e0e0e0",
  };
  
  const [newCategory, setNewCategory] = useState({
    categoryName: ''
  });
  
  const [loading, setLoading] = useState(false);
  
  const addCategory = async() => {
    if (!newCategory.categoryName) {
      return;
    }
    
    try {
      setLoading(true);
      await dispatch(addCategoryThunk(newCategory));
      
      if (setAddCtgr) {
        setAddCtgr(false);
      }
    } catch (error) {
      console.error("Error adding category:", error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography 
          variant="h6" 
          sx={{ 
            fontWeight: 700, 
            color: colors.text,
            fontFamily: 'Rubik, sans-serif',
          }}
        >
          פרטי קטגוריה
        </Typography>
        
        {setAddCtgr && (
          <IconButton 
            onClick={() => setAddCtgr(false)}
            sx={{ color: colors.textLight }}
          >
            <CloseIcon />
          </IconButton>
        )}
      </Box>
      
      <Divider sx={{ mb: 3 }} />
      
      <Grid container spacing={2}>
        <Grid item xs={12}>
          <StyledTextField
            fullWidth
            label="שם קטגוריה"
            variant="outlined"
            value={newCategory.categoryName}
            onChange={(i) => setNewCategory({ ...newCategory, categoryName: i.target.value })}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <CategoryIcon sx={{ color: colors.primary }} />
                </InputAdornment>
              ),
            }}
          />
        </Grid>
        
        <Grid item xs={12} sx={{ mt: 2, display: "flex", justifyContent: "center" }}>
          <FormButton
            variant="contained"
            onClick={addCategory}
            disabled={loading}
            startIcon={loading ? <CircularProgress size={20} color="inherit" /> : <SaveIcon />}
            sx={{
              bgcolor: colors.primary,
              color: "white",
              "&:hover": {
                bgcolor: colors.primaryDark,
              },
            }}
          >
            {loading ? "שומר..." : "לאישור"}
          </FormButton>
        </Grid>
      </Grid>
    </Box>
  );
};



// import React, { useState } from "react";
// import { useDispatch, useSelector } from "react-redux";
// import { useNavigate, useLocation } from "react-router-dom";
// import {
//   Box,
//   Container,
//   Typography,
//   Paper,
//   Grid,
//   Button,
//   TextField,
//   Avatar,
//   InputAdornment,
//   Alert,
//   Snackbar,
//   CircularProgress,
//   Card,
//   FormControl,
//   InputLabel,
//   Select,
//   MenuItem,
// } from "@mui/material";
// import { styled } from "@mui/material/styles";
// import CategoryIcon from "@mui/icons-material/Category";
// import DescriptionIcon from "@mui/icons-material/Description";
// import ArrowBackIcon from "@mui/icons-material/ArrowBack";
// import InfoIcon from "@mui/icons-material/Info";
// import AddCircleOutlineIcon from "@mui/icons-material/AddCircleOutline";
// import PriorityHighIcon from "@mui/icons-material/PriorityHigh";
// import { addCategoryThunk } from "../../Redux/Slices/Categories/categoryThunk";




// Styled components
// const PageContainer = styled(Box)(({ theme }) => ({
//   minHeight: "100vh",
//   background: "#f8f9fa",
//   paddingTop: theme.spacing(4),
//   paddingBottom: theme.spacing(4),
// }));

// const ContentContainer = styled(Container)(({ theme }) => ({
//   paddingTop: theme.spacing(2),
//   paddingBottom: theme.spacing(4),
// }));

// const FormCard = styled(Card)(({ theme }) => ({
//   borderRadius: 16,
//   overflow: "hidden",
//   boxShadow: "0 4px 20px rgba(0,0,0,0.05)",
//   border: "1px solid #e0e0e0",
// }));

// const FormSection = styled(Box)(({ theme }) => ({
//   padding: theme.spacing(4),
// }));

// const ActionButton = styled(Button)(({ theme }) => ({
//   borderRadius: 30,
//   padding: "10px 24px",
//   fontWeight: 700,
//   textTransform: "none",
//   fontSize: "1rem",
//   boxShadow: "0 4px 10px rgba(0,0,0,0.1)",
//   transition: "all 0.3s ease",
//   "&:hover": {
//     transform: "translateY(-2px)",
//     boxShadow: "0 6px 15px rgba(0,0,0,0.15)",
//   },
// }));

// export const AddCategory = () => {
//   const navigate = useNavigate();
//   const location = useLocation();
//   const dispatch = useDispatch();
  
//   // Institution color palette - Teal and Orange accents
//   const colors = {
//     primary: "#00796b", // Teal
//     primaryLight: "#48a999",
//     primaryDark: "#004c40",
//     secondary: "#ff5722", // Deep Orange
//     secondaryLight: "#ff8a50",
//     secondaryDark: "#c41c00",
//     text: "#263238",
//     textLight: "#546e7a",
//     background: "#f5f5f5",
//     card: "#ffffff",
//     border: "#e0e0e0",
//     success: "#4caf50",
//     warning: "#ff9800",
//     error: "#f44336",
//     info: "#2196f3",
//   };

//   // Get current user from Redux
//   const currUser = useSelector(u => u.user.currUser || {});
  
//   // Initialize category details with name from navigation state if available
//   const initialCategoryName = location.state?.categoryName || '';
  
//   // Local state
//   const [categoryDetails, setCategoryDetails] = useState({
//     categoryName: initialCategoryName,
//     description: '',
//     priority: 'רגילה'
//   });
  
//   const [errors, setErrors] = useState({
//     categoryName: false,
//     description: false
//   });
  
//   const [loading, setLoading] = useState(false);
//   const [success, setSuccess] = useState(false);
  
//   // Validate form fields
//   const validateForm = () => {
//     const newErrors = {
//       categoryName: !categoryDetails.categoryName.trim(),
//       description: !categoryDetails.description.trim()
//     };
    
//     setErrors(newErrors);
    
//     return !Object.values(newErrors).some(error => error);
//   };
  
//   // Handle form submission
//   const handleSubmit = async () => {
//     if (!validateForm()) {
//       return;
//     }
    
//     try {
//       setLoading(true);
//       // כאן צריך להיות קריאה לפונקציית ה-dispatch עם ה-thunk המתאים
//       // await dispatch(addCategoryThunk(categoryData));
      










//       // לצורך הדוגמה, נדמה הצלחה
//       setTimeout(() => {


//         setSuccess(true);
//         setLoading(false);
        
//         // איפוס הטופס
//         setCategoryData({
//           categoryName: "",
//           description: "",
//         });
//       }, 1000);
      
//     } catch (error) {
//       console.error("Error adding category:", error);

//       setLoading(false);
//     }
//   };
  
//   // Handle success message close
//   const handleSuccessClose = () => {
//     setSuccess(false);
//   };

//   return (





































//     <Box>
//       <Grid container spacing={2}>
//         <Grid item xs={12}>
//           <Typography 
//             variant="h6" 
//             sx={{ 
//               fontWeight: 700, 
//               color: colors.text, 
//               mb: 2,
//               fontFamily: 'Rubik, sans-serif',
//             }}
//           >
//             פרטי קטגוריה
//           </Typography>
//           <Divider sx={{ mb: 3 }} />
//         </Grid>
        
//         <Grid item xs={12}>
//           <StyledTextField
//             fullWidth
//             label="שם קטגוריה *"
//             variant="outlined"

//             name="categoryName"
//             value={categoryData.categoryName}
//             onChange={handleChange}
//             error={errors.categoryName}
//             helperText={errors.categoryName ? "שדה חובה" : ""}
//             InputProps={{
//               startAdornment: (
//                 <InputAdornment position="start">
//                   <CategoryIcon sx={{ color: colors.primary }} />
//                 </InputAdornment>
//               ),
//             }}
//           />
//         </Grid>
        
//         <Grid item xs={12}>
//           <StyledTextField
//             fullWidth
//             label="תיאור"
//             variant="outlined"
//             name="description"
//             multiline
//             rows={4}
//             value={categoryData.description}
//             onChange={handleChange}
//             InputProps={{
//               startAdornment: (
//                 <InputAdornment position="start">
//                   <DescriptionIcon sx={{ color: colors.primary }} />
//                 </InputAdornment>
//               ),
//             }}
//           />
//         </Grid>
        
//         <Grid item xs={12} sx={{ mt: 2, display: "flex", justifyContent: "center" }}>
//           <FormButton
//             variant="contained"
//             onClick={handleSubmit}
//             disabled={loading}
//             startIcon={loading ? <CircularProgress size={20} color="inherit" /> : <SaveIcon />}
//             sx={{


//               bgcolor: colors.primary,
//               color: "white",
//               "&:hover": {


//                 bgcolor: colors.primaryDark,
//               },
//             }}

//           >






























































































































































//             {loading ? "שומר..." : "שמור קטגוריה"}
//           </FormButton>
//         </Grid>
//       </Grid>
      
//       {/* Success Snackbar */}
//       <Snackbar
//         open={success}
//         autoHideDuration={6000}
//         onClose={handleSuccessClose}
//         anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
//       >
//         <Alert
//           onClose={handleSuccessClose}

//           severity="success"
//           variant="filled"
//           sx={{ width: '100%', borderRadius: 2, fontFamily: 'Rubik, sans-serif' }}
//         >











//           הקטגוריה נוספה בהצלחה!
//         </Alert>
//       </Snackbar>
//     </Box>
//   );
// };